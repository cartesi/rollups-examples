version: "3.9"

x-credentials:
  &postgres-config
  POSTGRES_HOSTNAME: database
  POSTGRES_PORT: "5432"
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: postgres

services:
  hardhat:
    image: cartesi/rollups-hardhat:1.0.0
    command:
      [
        "node",
        "--network",
        "hardhat",
        "--export",
        "/opt/cartesi/share/deployments/localhost.json"
      ]
    init: true
    ports:
      - "8545:8545"
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/opt/cartesi/share/deployments/localhost.json"
        ]
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - blockchain-data:/opt/cartesi/share/deployments
      - ./deployments:/app/rollups/deployments

  dispatcher:
    image: cartesi/rollups-dispatcher:1.0.0
    restart: always
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_set_interval:
        condition: service_completed_successfully
      deployer:
        condition: service_completed_successfully
      state_server:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RUST_LOG: info
      RD_DAPP_DEPLOYMENT_FILE: /deployments/localhost/dapp.json
      RD_ROLLUPS_DEPLOYMENT_FILE: /opt/cartesi/share/deployments/localhost.json
      RD_EPOCH_DURATION: 86400
      SC_GRPC_ENDPOINT: http://state_server:50051
      SC_DEFAULT_CONFIRMATIONS: 1
      TX_PROVIDER_HTTP_ENDPOINT: http://hardhat:8545
      AUTH_MNEMONIC: "test test test test test test test test test test test junk"
      TX_CHAIN_ID: 31337
      TX_CHAIN_IS_LEGACY: ${TX_LEGACY:-false}
      TX_DEFAULT_CONFIRMATIONS: 2
      REDIS_ENDPOINT: redis://redis:6379
    volumes:
      - blockchain-data:/opt/cartesi/share/deployments:ro
      - ./deployments:/deployments:ro

  state_server:
    image: cartesi/rollups-state-server:1.0.0
    restart: always
    healthcheck:
      test: ["CMD-SHELL","bash -c 'echo \"\" > /dev/tcp/127.0.0.1/50051;'"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      hardhat:
        condition: service_healthy
    environment:
      RUST_LOG: info
      SF_GENESIS_BLOCK: 0x1
      SF_SAFETY_MARGIN: 1
      BH_HTTP_ENDPOINT: http://hardhat:8545
      BH_WS_ENDPOINT: ws://hardhat:8545
      BH_BLOCK_TIMEOUT: 8

  advance_runner:
    image: cartesi/rollups-advance-runner:1.0.0
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8080/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      server_manager:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    volumes:
      - ./deployments:/deployments:ro
      - machine:/var/opt/cartesi/machine-snapshots
    environment:
      RUST_LOG: info
      SERVER_MANAGER_ENDPOINT: http://server_manager:5001
      SESSION_ID: default_rollups_id
      REDIS_ENDPOINT: redis://redis:6379
      CHAIN_ID: 31337
      DAPP_CONTRACT_ADDRESS_FILE: /deployments/localhost/dapp.json
      SNAPSHOT_DIR: /var/opt/cartesi/machine-snapshots
      SNAPSHOT_LATEST: /var/opt/cartesi/machine-snapshots/latest

  server_manager:
    restart: always
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL","bash -c 'echo \"\" > /dev/tcp/127.0.0.1/5001;'"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - machine:/var/opt/cartesi/machine-snapshots
    environment:
      - SERVER_MANAGER_LOG_LEVEL=warning
      - REMOTE_CARTESI_MACHINE_LOG_LEVEL=info

  deployer:
    image: cartesi/rollups-cli:1.0.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      server_manager:
        condition: service_healthy
    command:
      [
        "create",
        "--rpc",
        "http://hardhat:8545",
        "--deploymentFile",
        "/opt/cartesi/share/deployments/localhost.json",
        "--mnemonic",
        "test test test test test test test test test test test junk",
        "--templateHashFile",
        "/var/opt/cartesi/machine-snapshots/0_0/hash",
        "--outputFile",
        "/deployments/localhost/dapp.json"
      ]
    volumes:
      - blockchain-data:/opt/cartesi/share/deployments:ro
      - machine:/var/opt/cartesi/machine-snapshots:ro
      - ./deployments:/deployments

  hardhat_stop_automine:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setAutomine","params":[false]}',
        "http://hardhat:8545"
      ]

  hardhat_set_interval:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_stop_automine:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setIntervalMining","params":[5000]}',
        "http://hardhat:8545"
      ]

  inspect_server:
    image: cartesi/rollups-inspect-server:1.0.0
    restart: always
    ports:
      - "5005:5005"
    depends_on:
      server_manager:
        condition: service_healthy
    environment:
      RUST_LOG: info
      INSPECT_SERVER_ADDRESS: 0.0.0.0:5005
      SERVER_MANAGER_ADDRESS: server_manager:5001
      SESSION_ID: default_rollups_id

  indexer:
    image: cartesi/rollups-indexer:1.0.0
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    environment:
      <<: *postgres-config
      RUST_LOG: info
      REDIS_ENDPOINT: redis://redis:6379
      CHAIN_ID: 31337
      DAPP_CONTRACT_ADDRESS_FILE: /deployments/localhost/dapp.json
    volumes:
      - ./deployments:/deployments:ro

  graphql_server:
    image: cartesi/rollups-graphql-server:1.0.0
    ports:
      - "4000:4000"
    depends_on:
      database:
        condition: service_healthy
    environment:
      RUST_LOG: info
      GRAPHQL_HOST: "0.0.0.0"
      GRAPHQL_PORT: "4000"
      <<: *postgres-config

  database:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=password
    volumes:
      - database-data:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data

volumes:
  blockchain-data: {}
  machine: {}
  database-data: {}
  redis-data: {}
