version: "3.9"

services:
  hardhat:
    image: cartesi/rollups-hardhat:0.4.0
    command:
      [
        "node",
        "--network",
        "hardhat",
        "--export",
        "/opt/cartesi/share/blockchain/localhost.json",
      ]
    init: true
    ports:
      - "8545:8545"
    healthcheck:
      test:
        ["CMD", "test", "-f", "/opt/cartesi/share/blockchain/localhost.json"]
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - ./deployments:/app/deployments

  rollups_dispatcher:
    image: cartesi/rollups-dispatcher:0.4.0
    command:
      [
        "--dapp-contract-address-file",
        "/deployments/localhost/dapp.address",
        "--logic-config-path",
        "/opt/cartesi/share/config/logic-config.toml",
        "--sf-config",
        "/opt/cartesi/share/config/sf-config.toml",
        "--bs-config",
        "/opt/cartesi/share/config/bs-config.toml",
        "--tm-config",
        "/opt/cartesi/share/config/tm-config.toml",
        "--mnemonic",
        "test test test test test test test test test test test junk",
        "--chain-id",
        "31337",
      ]
    restart: always
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
      state_server:
        condition: service_started
      server_manager:
        condition: service_started
    environment:
      RUST_LOG: info
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain:ro
      - ./config:/opt/cartesi/share/config/
      - ./deployments:/deployments

  state_server:
    image: cartesi/delegate-server:0.4.0
    command:
      [
        "--sf-config",
        "/opt/cartesi/share/config/sf-config.toml",
        "--url",
        "http://hardhat:8545",
        "--ws-url",
        "ws://hardhat:8545",
        "rollups",
      ]
    restart: always
    #    healthcheck:
    #      test: ["CMD", "curl", "-f", "http://locahost:50051"]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 5
    depends_on:
      hardhat:
        condition: service_healthy
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain:ro
      - ./config:/opt/cartesi/share/config/

  server_manager:
    restart: always
    ports:
      - '5001:5001'
    #    healthcheck:
    #      test: ["CMD", "curl", "-f", "http://locahost:5001"]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 5
    volumes:
      - machine:/opt/cartesi/share/dapp-bin

  deployer:
    image: cartesi/rollups-cli:0.4.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      server_manager:
        condition: service_started
    command:
      [
        "create",
        "--rpc",
        "http://hardhat:8545",
        "--deploymentFile",
        "/opt/cartesi/share/blockchain/localhost.json",
        "--mnemonic",
        "test test test test test test test test test test test junk",
        "--templateHashFile",
        "/opt/cartesi/share/dapp-bin/hash",
        "--outputFile",
        "/deployments/localhost/dapp.address",
      ]
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - machine:/opt/cartesi/share/dapp-bin:ro
      - ./deployments:/deployments

  rollups_indexer:
    image: cartesi/rollups-indexer:0.4.0
    command:
      [
        "--dapp-contract-address-file",
        "/deployments/localhost/dapp.address",
        "--indexer-config-path",
        "/opt/cartesi/share/config/indexer-config.toml",
      ]
    restart: always
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
      state_server:
        condition: service_started
      server_manager:
        condition: service_started
      database:
        condition: service_healthy
    environment:
      RUST_LOG: info
    volumes:
      - blockchain-data:/opt/cartesi/share/blockchain
      - ./config:/opt/cartesi/share/config/
      - ./deployments:/deployments

  query_server:
    image: cartesi/query-server:0.4.0
    ports:
      - "4000:4000"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DB_USER=postgres
      - DB_NAME=postgres
      - DB_PASSWORD=password
      - DB_HOST=database
      - DB_PORT=5432
      - DB_TEST_NAME=postgres

  database:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=password
    volumes:
      - database-data:/var/lib/postgresql/data

volumes:
  blockchain-data: {}
  machine: {}
  database-data: {}
