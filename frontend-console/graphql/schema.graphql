type Proof {
  "Hashes given in Ethereum hex binary format (32 bytes), starting with '0x'"
  outputHashesRootHash: String!
  vouchersEpochRootHash: String!
  noticesEpochRootHash: String!
  machineStateHash: String!
  keccakInHashesSiblings: [String!]!
  outputHashesInEpochSiblings: [String!]!
}

type EpochConnection {
  totalCount: Int!
  edges: [EpochEdge!]!
  nodes: [Epoch!]!
  pageInfo: PageInfo!
}

type Input {
  id: ID!
  index: Int!
  epoch: Epoch!
  msgSender: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  "Get voucher from this particular input given the voucher's index"
  voucher(index: Int!): Voucher!
  "Get notice from this particular input given the notice's index"
  notice(index: Int!): Notice!
  "Get report from this particular input given report's index"
  report(index: Int!): Report!
  "Get vouchers from this particular input with additional ability to filter and paginate them"
  vouchers(first: Int, last: Int, after: String, before: String, where: VoucherFilter): VoucherConnection!
  "Get notices from this particular input with additional ability to filter and paginate them"
  notices(first: Int, last: Int, after: String, before: String, where: NoticeFilter): NoticeConnection!
  "Get reports from this particular input with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

type Voucher {
  id: ID!
  index: Int!
  input: Input!
  proof: Proof
  "Destination address as an Ethereum hex binary format (20 bytes), starting with '0x'"
  destination: String!
  "Payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
}

type Query {
  epoch(id: ID!): Epoch!
  epochI(index: Int!): Epoch!
  input(id: ID!): Input!
  notice(id: ID!): Notice!
  report(id: ID!): Report!
  voucher(id: ID!): Voucher!
  epochs(first: Int, last: Int, after: String, before: String): EpochConnection!
  "Get all available inputs with additional ability to filter and paginate them"
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!
  "Get all available vouchers with additional ability to filter and paginate them"
  vouchers(first: Int, last: Int, after: String, before: String, where: VoucherFilter): VoucherConnection!
  "Get all available notices with additional ability to filter and paginate them"
  notices(first: Int, last: Int, after: String, before: String, where: NoticeFilter): NoticeConnection!
  "Get all available reports with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

type NoticeEdge {
  node: Notice!
  cursor: String!
}

input NoticeFilter {
  dummy: String!
}

type Epoch {
  id: ID!
  index: Int!
  "Get input from this particular epoch given the input's index"
  input(index: Int!): Input!
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!
  "Get vouchers from this particular epoch with additional ability to filter and paginate them"
  vouchers(first: Int, last: Int, after: String, before: String, where: VoucherFilter): VoucherConnection!
  "Get notices from this particular input with additional ability to filter and paginate them"
  notices(first: Int, last: Int, after: String, before: String, where: NoticeFilter): NoticeConnection!
  "Get reports from this particular epoch with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

input VoucherFilter {
  destination: String!
}

type InputConnection {
  totalCount: Int!
  edges: [InputEdge!]!
  nodes: [Input!]!
  pageInfo: PageInfo!
}

input ReportFilter {
  dummy: String!
}

type EpochEdge {
  node: Epoch!
  cursor: String!
}

type VoucherConnection {
  totalCount: Int!
  edges: [VoucherEdge!]!
  nodes: [Voucher!]!
  pageInfo: PageInfo!
}

type Notice {
  id: ID!
  index: Int!
  proof: Proof
  input: Input!
  "Keccak in Ethereum hex binary format, starting with '0x'"
  keccak: String!
  "Payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
}

type ReportEdge {
  node: Report!
  cursor: String!
}

type ReportConnection {
  totalCount: Int!
  edges: [ReportEdge!]!
  nodes: [Report!]!
  pageInfo: PageInfo!
}

input InputFilter {
  msgSender: String
  blockNumber: BigInt
  blockNumberLowerThan: BigInt
  blockNumberGreaterThan: BigInt
  timestampLowerThan: BigInt
  timestampGreaterThan: BigInt
}

scalar BigInt

type NoticeConnection {
  totalCount: Int!
  edges: [NoticeEdge!]!
  nodes: [Notice!]!
  pageInfo: PageInfo!
}

type InputEdge {
  node: Input!
  cursor: String!
}

"Connection pattern cursor based pagination page info"
type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type VoucherEdge {
  node: Voucher!
  cursor: String!
}

type Report {
  id: ID!
  index: Int!
  input: Input!
  "Payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
}

schema {
  query: Query
}
