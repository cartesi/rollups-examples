{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "JobAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "JobOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "JobRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Retired",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "cancelHire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "getUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "hire",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "workerAddress",
          "type": "address"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "isOwned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "workerAddress",
          "type": "address"
        }
      ],
      "name": "isPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "isRetired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectJob",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_workerAddress",
          "type": "address"
        }
      ],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a5cf95d0aed9f45b4067319e731a5e7ae16220b11daa8f326b48f6293c857bc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "571031",
    "logsBloom": "0x
    "blockHash": "0xb7471845e401a6e68f62d39f642232c965e711f49ae001787ac622b66a1b9018",
    "transactionHash": "0x7a5cf95d0aed9f45b4067319e731a5e7ae16220b11daa8f326b48f6293c857bc",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "571031",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"JobAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"JobOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"JobRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Retired\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"cancelHire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"hire\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"workerAddress\",\"type\":\"address\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"isOwned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"workerAddress\",\"type\":\"address\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"isRetired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectJob\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_workerAddress\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isAvailable(address)\":{\"params\":{\"workerAddress\":\"address of the worker node\"}},\"isPending(address)\":{\"params\":{\"workerAddress\":\"address of the worker node\"}}},\"stateVariables\":{\"MAXIMUM_FUNDING\":{\"details\":\"transfers bigger than maximum value should be done directly\"},\"MINIMUM_FUNDING\":{\"details\":\"user can only hire a worker if he sends more than minimum value\"},\"stateOf\":{\"details\":\"mapping from worker to its internal state\"},\"userOf\":{\"details\":\"mapping from worker to its user\"}},\"version\":1},\"userdoc\":{\"events\":{\"JobOffer(address,address)\":{\"notice\":\"Events signalling every state transition\"}},\"kind\":\"user\",\"methods\":{\"acceptJob()\":{\"notice\":\"Called by the worker to accept the job\"},\"isAvailable(address)\":{\"notice\":\"Returns true if worker node is available\"},\"isPending(address)\":{\"notice\":\"Returns true if worker node is pending\"},\"rejectJob()\":{\"notice\":\"Called by the worker to reject a job offer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorkerManagerImpl.sol\":\"WorkerManagerImpl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/WorkerManager.sol\":{\"content\":\"// Copyright 2010 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title WorkerManager\\n/// @author Danilo Tuler\\npragma solidity >=0.7.0;\\n\\ninterface WorkerManager {\\n    /// @notice Returns true if worker node is available\\n    /// @param workerAddress address of the worker node\\n    function isAvailable(address workerAddress) external view returns (bool);\\n\\n    /// @notice Returns true if worker node is pending\\n    /// @param workerAddress address of the worker node\\n    function isPending(address workerAddress) external view returns (bool);\\n\\n    /// @notice Get the owner of the worker node\\n    /// @param workerAddress address of the worker node\\n    function getOwner(address workerAddress) external view returns (address);\\n\\n    /// @notice Get the user of the worker node, which may not be the owner yet, or how was the previous owner of a retired node\\n    function getUser(address workerAddress) external view returns (address);\\n\\n    /// @notice Returns true if worker node is owned by some user\\n    function isOwned(address workerAddress) external view returns (bool);\\n\\n    /// @notice Asks the worker to work for the sender. Sender needs to pay something.\\n    /// @param workerAddress address of the worker\\n    function hire(address payable workerAddress) external payable;\\n\\n    /// @notice Called by the worker to accept the job\\n    function acceptJob() external;\\n\\n    /// @notice Called by the worker to reject a job offer\\n    function rejectJob() external payable;\\n\\n    /// @notice Called by the user to cancel a job offer\\n    /// @param workerAddress address of the worker node\\n    function cancelHire(address workerAddress) external;\\n\\n    /// @notice Called by the user to retire his worker.\\n    /// @param workerAddress address of the worker to be retired\\n    /// @dev this also removes all authorizations in place\\n    function retire(address payable workerAddress) external;\\n\\n    /// @notice Returns true if worker node was retired by its owner\\n    function isRetired(address workerAddress) external view returns (bool);\\n\\n    /// @notice Events signalling every state transition\\n    event JobOffer(address indexed worker, address indexed user);\\n    event JobAccepted(address indexed worker, address indexed user);\\n    event JobRejected(address indexed worker, address indexed user);\\n    event Retired(address indexed worker, address indexed user);\\n}\\n\",\"keccak256\":\"0xb93bac1de98b3fb44421c2498f11bcd246795c7cffeeebb535a046e88c303410\",\"license\":\"Apache-2.0\"},\"contracts/WorkerManagerImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title WorkerManagerImpl\\n/// @author Danilo Tuler\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WorkerManager.sol\\\";\\n\\ncontract WorkerManagerImpl is WorkerManager {\\n    /// @dev user can only hire a worker if he sends more than minimum value\\n    uint256 constant MINIMUM_FUNDING = 0.001 ether;\\n\\n    /// @dev transfers bigger than maximum value should be done directly\\n    uint256 constant MAXIMUM_FUNDING = 3 ether;\\n\\n    /// @notice A worker can be in 4 different states, starting from Available\\n    enum WorkerState {Available, Pending, Owned, Retired}\\n\\n    /// @dev mapping from worker to its user\\n    mapping(address => address payable) private userOf;\\n\\n    /// @dev mapping from worker to its internal state\\n    mapping(address => WorkerState) private stateOf;\\n\\n    function isAvailable(address workerAddress)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return stateOf[workerAddress] == WorkerState.Available;\\n    }\\n\\n    function isPending(address workerAddress)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return stateOf[workerAddress] == WorkerState.Pending;\\n    }\\n\\n    function getOwner(address _workerAddress)\\n        public\\n        override\\n        view\\n        returns (address)\\n    {\\n        return\\n            stateOf[_workerAddress] == WorkerState.Owned\\n                ? userOf[_workerAddress]\\n                : address(0);\\n    }\\n\\n    function getUser(address _workerAddress)\\n        public\\n        override\\n        view\\n        returns (address)\\n    {\\n        return userOf[_workerAddress];\\n    }\\n\\n    function isOwned(address _workerAddress)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return stateOf[_workerAddress] == WorkerState.Owned;\\n    }\\n\\n    function hire(address payable _workerAddress) public override payable {\\n        require(isAvailable(_workerAddress), \\\"worker is not available\\\");\\n        require(_workerAddress != address(0), \\\"worker address can not be 0x0\\\");\\n        require(msg.value >= MINIMUM_FUNDING, \\\"funding below minimum\\\");\\n        require(msg.value <= MAXIMUM_FUNDING, \\\"funding above maximum\\\");\\n\\n        // set owner\\n        userOf[_workerAddress] = payable(msg.sender);\\n\\n        // change state\\n        stateOf[_workerAddress] = WorkerState.Pending;\\n\\n        // transfer ether to worker\\n        _workerAddress.transfer(msg.value);\\n\\n        // emit event\\n        emit JobOffer(_workerAddress, msg.sender);\\n    }\\n\\n    function acceptJob() public override {\\n        require(\\n            userOf[msg.sender] != address(0),\\n            \\\"worker does not have a job offer\\\"\\n        );\\n        require(\\n            stateOf[msg.sender] == WorkerState.Pending,\\n            \\\"worker not is not in pending state\\\"\\n        );\\n\\n        // change state\\n        stateOf[msg.sender] = WorkerState.Owned;\\n        // from now on getOwner will return the user\\n\\n        // emit event\\n        emit JobAccepted(msg.sender, userOf[msg.sender]);\\n    }\\n\\n    function rejectJob() public override payable {\\n        require(\\n            userOf[msg.sender] != address(0),\\n            \\\"worker does not have a job offer\\\"\\n        );\\n\\n        address payable owner = userOf[msg.sender];\\n\\n        // reset hirer back to null\\n        userOf[msg.sender] = payable(address(0));\\n\\n        // change state\\n        stateOf[msg.sender] = WorkerState.Available;\\n\\n        // return the money\\n        owner.transfer(msg.value);\\n\\n        // emit event\\n        emit JobRejected(msg.sender, userOf[msg.sender]);\\n    }\\n\\n    function cancelHire(address _workerAddress) public override {\\n        require(\\n            userOf[_workerAddress] != address(0),\\n            \\\"worker does not have a job offer\\\"\\n        );\\n\\n        require(\\n            userOf[_workerAddress] == msg.sender,\\n            \\\"only hirer can cancel the offer\\\"\\n        );\\n\\n        // change state\\n        stateOf[_workerAddress] = WorkerState.Retired;\\n\\n        // emit event\\n        emit Retired(_workerAddress, msg.sender);\\n    }\\n\\n    function retire(address payable _workerAddress) public override {\\n        require(\\n            stateOf[_workerAddress] == WorkerState.Owned,\\n            \\\"worker not owned\\\"\\n        );\\n        require(\\n            userOf[_workerAddress] == msg.sender,\\n            \\\"only owner can retire worker\\\"\\n        );\\n\\n        // change state\\n        stateOf[_workerAddress] = WorkerState.Retired;\\n\\n        // emit event\\n        emit Retired(_workerAddress, msg.sender);\\n    }\\n\\n    function isRetired(address _workerAddress)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return stateOf[_workerAddress] == WorkerState.Retired;\\n    }\\n}\\n\",\"keccak256\":\"0x71a604e959e92f3b30008ac43d25bfc9e73040e2b384e73d1daa607d85bdbd1e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061095f806100206000396000f3fe60806040526004361061009c5760003560e01c80639e6371ba116100645780639e6371ba14610166578063a00745b614610186578063b64b3bed146101a6578063d9d6bd86146101c6578063f4dc754b146101d9578063fa544161146101f957600080fd5b806303d6e81e146100a15780632896f60b146100ab5780636d3c6275146100e05780636f77926b146101005780639b789b7e14610151575b600080fd5b6100a9610219565b005b3480156100b757600080fd5b506100cb6100c63660046108b9565b610305565b60405190151581526020015b60405180910390f35b3480156100ec57600080fd5b506100cb6100fb3660046108b9565b61034b565b34801561010c57600080fd5b5061013961011b3660046108b9565b6001600160a01b039081166000908152602081905260409020541690565b6040516001600160a01b0390911681526020016100d7565b34801561015d57600080fd5b506100a9610354565b34801561017257600080fd5b506100a96101813660046108b9565b61046e565b34801561019257600080fd5b506100cb6101a13660046108b9565b6105a2565b3480156101b257600080fd5b506100a96101c13660046108b9565b6105ab565b6100a96101d43660046108b9565b61064b565b3480156101e557600080fd5b506100cb6101f43660046108b9565b610843565b34801561020557600080fd5b506101396102143660046108b9565b61084c565b336000908152602081905260409020546001600160a01b03166102575760405162461bcd60e51b815260040161024e906108dc565b60405180910390fd5b3360009081526020818152604080832080546001600160a01b031981169091556001909252808320805460ff19169055516001600160a01b039091169182913480156108fc0292909190818181858888f193505050501580156102be573d6000803e3d6000fd5b50336000818152602081905260408082205490516001600160a01b0390911692917fac8bfc64efe7b663f325ca81c7468a291a868aacc74c8f91cdc5c8141c15e38a91a350565b6000805b6001600160a01b03831660009081526001602052604090205460ff16600381111561034457634e487b7160e01b600052602160045260246000fd5b1492915050565b60006003610309565b336000908152602081905260409020546001600160a01b03166103895760405162461bcd60e51b815260040161024e906108dc565b60013360009081526001602052604090205460ff1660038111156103bd57634e487b7160e01b600052602160045260246000fd5b146104155760405162461bcd60e51b815260206004820152602260248201527f776f726b6572206e6f74206973206e6f7420696e2070656e64696e6720737461604482015261746560f01b606482015260840161024e565b336000818152600160209081526040808320805460ff19166002179055908290528082205490516001600160a01b0390911692917f0cfa12ab8ee8dc6f9b68938d5e764dafed737d43dc5ec8443abf81e645276eb691a3565b60026001600160a01b03821660009081526001602052604090205460ff1660038111156104ab57634e487b7160e01b600052602160045260246000fd5b146104eb5760405162461bcd60e51b815260206004820152601060248201526f1ddbdc9ad95c881b9bdd081bdddb995960821b604482015260640161024e565b6001600160a01b038181166000908152602081905260409020541633146105545760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c79206f776e65722063616e2072657469726520776f726b657200000000604482015260640161024e565b6001600160a01b038116600081815260016020526040808220805460ff19166003179055513392917f657b373e1262c26d1f1a83e8949f0af9067fe48026b308e47eec5ef6b40ff25d91a350565b60006001610309565b6001600160a01b03818116600090815260208190526040902054166105e25760405162461bcd60e51b815260040161024e906108dc565b6001600160a01b038181166000908152602081905260409020541633146105545760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792068697265722063616e2063616e63656c20746865206f6666657200604482015260640161024e565b61065481610305565b6106a05760405162461bcd60e51b815260206004820152601760248201527f776f726b6572206973206e6f7420617661696c61626c65000000000000000000604482015260640161024e565b6001600160a01b0381166106f65760405162461bcd60e51b815260206004820152601d60248201527f776f726b657220616464726573732063616e206e6f7420626520307830000000604482015260640161024e565b66038d7ea4c680003410156107455760405162461bcd60e51b815260206004820152601560248201527466756e64696e672062656c6f77206d696e696d756d60581b604482015260640161024e565b6729a2241af62c00003411156107955760405162461bcd60e51b815260206004820152601560248201527466756e64696e672061626f7665206d6178696d756d60581b604482015260640161024e565b6001600160a01b03811660009081526020818152604080832080546001600160a01b03191633179055600191829052909120805460ff1916828002179055506040516001600160a01b038216903480156108fc02916000818181858888f19350505050158015610809573d6000803e3d6000fd5b5060405133906001600160a01b038316907f2e0aa97ef0e6f4f76319861c90e91beec7a7a44a698cab856dfc1985a0c588f090600090a350565b60006002610309565b600060026001600160a01b03831660009081526001602052604090205460ff16600381111561088b57634e487b7160e01b600052602160045260246000fd5b146108975760006108b3565b6001600160a01b03808316600090815260208190526040902054165b92915050565b6000602082840312156108ca578081fd5b81356108d581610911565b9392505050565b6020808252818101527f776f726b657220646f6573206e6f7420686176652061206a6f62206f66666572604082015260600190565b6001600160a01b038116811461092657600080fd5b5056fea26469706673582212204f10e5c420944ca621a08a09fa16ebe0123c0a671181c14a268338dad73fcebc64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80639e6371ba116100645780639e6371ba14610166578063a00745b614610186578063b64b3bed146101a6578063d9d6bd86146101c6578063f4dc754b146101d9578063fa544161146101f957600080fd5b806303d6e81e146100a15780632896f60b146100ab5780636d3c6275146100e05780636f77926b146101005780639b789b7e14610151575b600080fd5b6100a9610219565b005b3480156100b757600080fd5b506100cb6100c63660046108b9565b610305565b60405190151581526020015b60405180910390f35b3480156100ec57600080fd5b506100cb6100fb3660046108b9565b61034b565b34801561010c57600080fd5b5061013961011b3660046108b9565b6001600160a01b039081166000908152602081905260409020541690565b6040516001600160a01b0390911681526020016100d7565b34801561015d57600080fd5b506100a9610354565b34801561017257600080fd5b506100a96101813660046108b9565b61046e565b34801561019257600080fd5b506100cb6101a13660046108b9565b6105a2565b3480156101b257600080fd5b506100a96101c13660046108b9565b6105ab565b6100a96101d43660046108b9565b61064b565b3480156101e557600080fd5b506100cb6101f43660046108b9565b610843565b34801561020557600080fd5b506101396102143660046108b9565b61084c565b336000908152602081905260409020546001600160a01b03166102575760405162461bcd60e51b815260040161024e906108dc565b60405180910390fd5b3360009081526020818152604080832080546001600160a01b031981169091556001909252808320805460ff19169055516001600160a01b039091169182913480156108fc0292909190818181858888f193505050501580156102be573d6000803e3d6000fd5b50336000818152602081905260408082205490516001600160a01b0390911692917fac8bfc64efe7b663f325ca81c7468a291a868aacc74c8f91cdc5c8141c15e38a91a350565b6000805b6001600160a01b03831660009081526001602052604090205460ff16600381111561034457634e487b7160e01b600052602160045260246000fd5b1492915050565b60006003610309565b336000908152602081905260409020546001600160a01b03166103895760405162461bcd60e51b815260040161024e906108dc565b60013360009081526001602052604090205460ff1660038111156103bd57634e487b7160e01b600052602160045260246000fd5b146104155760405162461bcd60e51b815260206004820152602260248201527f776f726b6572206e6f74206973206e6f7420696e2070656e64696e6720737461604482015261746560f01b606482015260840161024e565b336000818152600160209081526040808320805460ff19166002179055908290528082205490516001600160a01b0390911692917f0cfa12ab8ee8dc6f9b68938d5e764dafed737d43dc5ec8443abf81e645276eb691a3565b60026001600160a01b03821660009081526001602052604090205460ff1660038111156104ab57634e487b7160e01b600052602160045260246000fd5b146104eb5760405162461bcd60e51b815260206004820152601060248201526f1ddbdc9ad95c881b9bdd081bdddb995960821b604482015260640161024e565b6001600160a01b038181166000908152602081905260409020541633146105545760405162461bcd60e51b815260206004820152601c60248201527f6f6e6c79206f776e65722063616e2072657469726520776f726b657200000000604482015260640161024e565b6001600160a01b038116600081815260016020526040808220805460ff19166003179055513392917f657b373e1262c26d1f1a83e8949f0af9067fe48026b308e47eec5ef6b40ff25d91a350565b60006001610309565b6001600160a01b03818116600090815260208190526040902054166105e25760405162461bcd60e51b815260040161024e906108dc565b6001600160a01b038181166000908152602081905260409020541633146105545760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792068697265722063616e2063616e63656c20746865206f6666657200604482015260640161024e565b61065481610305565b6106a05760405162461bcd60e51b815260206004820152601760248201527f776f726b6572206973206e6f7420617661696c61626c65000000000000000000604482015260640161024e565b6001600160a01b0381166106f65760405162461bcd60e51b815260206004820152601d60248201527f776f726b657220616464726573732063616e206e6f7420626520307830000000604482015260640161024e565b66038d7ea4c680003410156107455760405162461bcd60e51b815260206004820152601560248201527466756e64696e672062656c6f77206d696e696d756d60581b604482015260640161024e565b6729a2241af62c00003411156107955760405162461bcd60e51b815260206004820152601560248201527466756e64696e672061626f7665206d6178696d756d60581b604482015260640161024e565b6001600160a01b03811660009081526020818152604080832080546001600160a01b03191633179055600191829052909120805460ff1916828002179055506040516001600160a01b038216903480156108fc02916000818181858888f19350505050158015610809573d6000803e3d6000fd5b5060405133906001600160a01b038316907f2e0aa97ef0e6f4f76319861c90e91beec7a7a44a698cab856dfc1985a0c588f090600090a350565b60006002610309565b600060026001600160a01b03831660009081526001602052604090205460ff16600381111561088b57634e487b7160e01b600052602160045260246000fd5b146108975760006108b3565b6001600160a01b03808316600090815260208190526040902054165b92915050565b6000602082840312156108ca578081fd5b81356108d581610911565b9392505050565b6020808252818101527f776f726b657220646f6573206e6f7420686176652061206a6f62206f66666572604082015260600190565b6001600160a01b038116811461092657600080fd5b5056fea26469706673582212204f10e5c420944ca621a08a09fa16ebe0123c0a671181c14a268338dad73fcebc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isAvailable(address)": {
        "params": {
          "workerAddress": "address of the worker node"
        }
      },
      "isPending(address)": {
        "params": {
          "workerAddress": "address of the worker node"
        }
      }
    },
    "stateVariables": {
      "MAXIMUM_FUNDING": {
        "details": "transfers bigger than maximum value should be done directly"
      },
      "MINIMUM_FUNDING": {
        "details": "user can only hire a worker if he sends more than minimum value"
      },
      "stateOf": {
        "details": "mapping from worker to its internal state"
      },
      "userOf": {
        "details": "mapping from worker to its user"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "JobOffer(address,address)": {
        "notice": "Events signalling every state transition"
      }
    },
    "kind": "user",
    "methods": {
      "acceptJob()": {
        "notice": "Called by the worker to accept the job"
      },
      "isAvailable(address)": {
        "notice": "Returns true if worker node is available"
      },
      "isPending(address)": {
        "notice": "Returns true if worker node is pending"
      },
      "rejectJob()": {
        "notice": "Called by the worker to reject a job offer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 903,
        "contract": "contracts/WorkerManagerImpl.sol:WorkerManagerImpl",
        "label": "userOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address_payable)"
      },
      {
        "astId": 909,
        "contract": "contracts/WorkerManagerImpl.sol:WorkerManagerImpl",
        "label": "stateOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_enum(WorkerState)898)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_enum(WorkerState)898": {
        "encoding": "inplace",
        "label": "enum WorkerManagerImpl.WorkerState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address_payable)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address payable)",
        "numberOfBytes": "32",
        "value": "t_address_payable"
      },
      "t_mapping(t_address,t_enum(WorkerState)898)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum WorkerManagerImpl.WorkerState)",
        "numberOfBytes": "32",
        "value": "t_enum(WorkerState)898"
      }
    }
  }
}